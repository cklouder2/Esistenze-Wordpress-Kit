<?php
/*
 * Quick Menu Cards - Admin Class (Düzeltilmiş)
 * Handles all admin panel functionality with modern architecture
 */

if (!defined('ABSPATH')) {
    exit;
}

class EsistenzeQuickMenuCardsAdmin {
    
    private $module_path;
    private $module_url;
    private $capability;
    private $page_hooks;
    
    public function __construct($module_path, $module_url) {
        $this->module_path = $module_path;
        $this->module_url = $module_url;
        $this->capability = esistenze_qmc_capability();
        $this->page_hooks = array();
        
        // Hook'ları başlat
        add_action('admin_menu', array($this, 'admin_menu'), 9);
        add_action('admin_init', array($this, 'register_settings'));
        add_action('admin_enqueue_scripts', array($this, 'enqueue_admin_scripts'));
        add_action('admin_notices', array($this, 'show_admin_notices'));
        add_action('admin_post_esistenze_save_group', array($this, 'handle_save_group'));
        add_action('admin_post_esistenze_delete_group', array($this, 'handle_delete_group'));
        
        // AJAX hooks
        $this->init_ajax_hooks();
    }
    
    private function init_ajax_hooks() {
        // Admin AJAX hooks
        add_action('wp_ajax_esistenze_save_card_group', array($this, 'ajax_save_card_group'));
        add_action('wp_ajax_esistenze_delete_card_group', array($this, 'ajax_delete_card_group'));
        add_action('wp_ajax_esistenze_duplicate_card_group', array($this, 'ajax_duplicate_card_group'));
        add_action('wp_ajax_esistenze_preview_group', array($this, 'ajax_preview_group'));
        add_action('wp_ajax_esistenze_export_groups', array($this, 'ajax_export_groups'));
        add_action('wp_ajax_esistenze_import_groups', array($this, 'ajax_import_groups'));
    }
    
    public function admin_menu() {
        // Ana menü - daha düşük capability ile
        $main_capability = current_user_can('manage_options') ? 'manage_options' : 'edit_pages';
        
        $this->page_hooks['main'] = add_menu_page(
            'Quick Menu Cards',
            'Quick Menu Cards', 
            $main_capability,
            'esistenze-quick-menu',
            array($this, 'admin_page'),
            'dashicons-grid-view',
            30
        );
        
        // Alt menüler
        $this->page_hooks['groups'] = add_submenu_page(
            'esistenze-quick-menu',
            'Kart Grupları',
            'Kart Grupları',
            $main_capability,
            'esistenze-quick-menu',
            array($this, 'admin_page')
        );
        
        // Sadece manage_options yetkisi olanlar için ayarlar
        if (current_user_can('manage_options')) {
            $this->page_hooks['settings'] = add_submenu_page(
                'esistenze-quick-menu',
                'Ayarlar',
                'Ayarlar',
                'manage_options',
                'esistenze-quick-menu-settings',
                array($this, 'settings_page')
            );
            
            $this->page_hooks['analytics'] = add_submenu_page(
                'esistenze-quick-menu',
                'İstatistikler',
                'İstatistikler',
                'manage_options',
                'esistenze-quick-menu-analytics', 
                array($this, 'analytics_page')
            );
            
            $this->page_hooks['tools'] = add_submenu_page(
                'esistenze-quick-menu',
                'Araçlar',
                'Araçlar',
                'manage_options',
                'esistenze-quick-menu-tools',
                array($this, 'tools_page')
            );
        }
        
        // Kontextüel yardım ekle
        foreach ($this->page_hooks as $hook) {
            if ($hook) {
                add_action('load-' . $hook, array($this, 'add_contextual_help'));
            }
        }
    }
    
    public function register_settings() {
        // Ana kart verileri
        register_setting(
            'esistenze_quick_menu_cards', 
            'esistenze_quick_menu_kartlari', 
            array(
                'type' => 'array',
                'sanitize_callback' => array($this, 'sanitize_cards_data'),
                'show_in_rest' => false,
                'default' => array()
            )
        );
        
        // Ayarlar (sadece manage_options yetkisi olanlar için)
        if (current_user_can('manage_options')) {
            register_setting(
                'esistenze_quick_menu_settings', 
                'esistenze_quick_menu_settings', 
                array(
                    'type' => 'array',
                    'sanitize_callback' => array($this, 'sanitize_settings_data'),
                    'show_in_rest' => false,
                    'default' => EsistenzeQuickMenuCards::get_default_settings()
                )
            );
            
            register_setting(
                'esistenze_quick_menu_analytics', 
                'esistenze_quick_menu_analytics', 
                array(
                    'type' => 'array',
                    'sanitize_callback' => array($this, 'sanitize_analytics_data'),
                    'show_in_rest' => false,
                    'default' => array()
                )
            );
        }
    }
    
    public function enqueue_admin_scripts($hook) {
        // Sadece kendi sayfalarımızda script yükle
        if (!in_array($hook, $this->page_hooks) || empty($this->page_hooks)) {
            return;
        }
        
        // WordPress medya kütüphanesi
        wp_enqueue_media();
        wp_enqueue_script('jquery-ui-sortable');
        
        // Admin styles
        wp_enqueue_style(
            'esistenze-quick-menu-admin',
            $this->module_url . 'assets/admin.css',
            array('dashicons'),
            $this->get_version()
        );
        
        // Admin scripts
        wp_enqueue_script(
            'esistenze-quick-menu-admin',
            $this->module_url . 'assets/admin.js',
            array('jquery', 'jquery-ui-sortable', 'wp-util'),
            $this->get_version(),
            true
        );
        
        // Localize script
        wp_localize_script('esistenze-quick-menu-admin', 'esistenzeAdmin', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('esistenze_quick_menu_nonce'),
            'post_url' => admin_url('admin-post.php'),
            'capability' => $this->capability,
            'can_manage_options' => current_user_can('manage_options'),
            'strings' => array(
                'delete_confirm' => 'Bu grubu silmek istediğinizden emin misiniz?',
                'delete_card_confirm' => 'Bu kartı silmek istediğinizden emin misiniz?',
                'save_success' => 'Grup başarıyla kaydedildi!',
                'save_error' => 'Kayıt sırasında hata oluştu.',
                'copy_success' => 'Shortcode kopyalandı!',
                'required_field' => 'Bu alan zorunludur.',
                'max_cards' => 'En fazla 20 kart ekleyebilirsiniz.',
                'loading' => 'Yükleniyor...',
                'preview' => 'Önizleme',
                'invalid_url' => 'Geçersiz URL formatı.',
                'unsaved_changes' => 'Kaydedilmemiş değişiklikleriniz var. Sayfadan çıkmak istediğinizden emin misiniz?',
                'permission_error' => 'Bu işlem için yetkiniz bulunmuyor.'
            ),
            'settings' => array(
                'max_cards_per_group' => 20,
                'auto_save' => true,
                'preview_enabled' => true,
                'debug_mode' => defined('WP_DEBUG') && WP_DEBUG
            )
        ));
    }
    
    public function admin_page() {
        // Yetki kontrolü
        if (!current_user_can($this->capability)) {
            wp_die(__('Bu sayfaya erişim yetkiniz bulunmuyor.'));
        }
        
        $current_tab = isset($_GET['tab']) ? sanitize_text_field($_GET['tab']) : 'groups';
        $current_action = isset($_GET['action']) ? sanitize_text_field($_GET['action']) : '';
        
        echo '<div class="wrap esistenze-quick-menu-wrap">';
        echo '<h1 class="wp-heading-inline">Quick Menu Cards</h1>';
        
        // Yeni grup ekle butonu
        if ($current_tab === 'groups') {
            echo '<a href="' . esc_url(admin_url('admin.php?page=esistenze-quick-menu&tab=edit&action=new')) . '" class="page-title-action">Yeni Grup Ekle</a>';
        }
        
        echo '<hr class="wp-header-end">';
        
        // Tab navigation
        $this->render_admin_tabs($current_tab);
        
        // İçerik alanı
        echo '<div class="tab-content">';
        
        switch ($current_tab) {
            case 'groups':
            default:
                $this->render_groups_page();
                break;
            case 'edit':
                $this->render_edit_page();
                break;
        }
        
        echo '</div></div>';
    }
    
    private function render_admin_tabs($current_tab) {
        $tabs = array(
            'groups' => array(
                'title' => 'Kart Grupları',
                'icon' => 'dashicons-grid-view'
            )
        );
        
        // Edit tab (sadece edit modundayken göster)
        if (isset($_GET['action']) && ($_GET['action'] === 'edit' || $_GET['action'] === 'new')) {
            $edit_title = $_GET['action'] === 'new' ? 'Yeni Grup' : 'Grup Düzenle';
            $tabs['edit'] = array(
                'title' => $edit_title,
                'icon' => 'dashicons-edit'
            );
        }
        
        echo '<nav class="nav-tab-wrapper wp-clearfix">';
        foreach ($tabs as $tab_key => $tab_data) {
            $class = ($current_tab === $tab_key) ? 'nav-tab nav-tab-active' : 'nav-tab';
            $url = admin_url('admin.php?page=esistenze-quick-menu&tab=' . $tab_key);
            
            if ($tab_key === 'edit' && isset($_GET['action'])) {
                $url .= '&action=' . sanitize_text_field($_GET['action']);
                if (isset($_GET['edit_group'])) {
                    $url .= '&edit_group=' . intval($_GET['edit_group']);
                }
            }
            
            echo '<a href="' . esc_url($url) . '" class="' . esc_attr($class) . '">';
            echo '<span class="dashicons ' . esc_attr($tab_data['icon']) . '"></span> ';
            echo esc_html($tab_data['title']);
            echo '</a>';
        }
        echo '</nav>';
    }
    
    private function render_groups_page() {
        $kartlar = get_option('esistenze_quick_menu_kartlari', array());
        if (!is_array($kartlar)) {
            $kartlar = array();
            update_option('esistenze_quick_menu_kartlari', $kartlar);
        }
        
        // View dosyasını include et
        if (file_exists($this->module_path . 'views/admin-groups.php')) {
            include $this->module_path . 'views/admin-groups.php';
        } else {
            echo '<div class="notice notice-error"><p>Grup listesi dosyası bulunamadı.</p></div>';
        }
    }
    
    private function render_edit_page() {
        $action = isset($_GET['action']) ? sanitize_text_field($_GET['action']) : 'edit';
        $group_id = isset($_GET['edit_group']) ? intval($_GET['edit_group']) : -1;
        
        if ($action === 'new') {
            $group_id = -1; // Yeni grup
            $group_data = array();
        } else {
            if ($group_id < 0) {
                wp_redirect(admin_url('admin.php?page=esistenze-quick-menu'));
                exit;
            }
            
            $kartlar = get_option('esistenze_quick_menu_kartlari', array());
            if (!isset($kartlar[$group_id]) || !is_array($kartlar[$group_id])) {
                wp_die('Grup bulunamadı.');
            }
            $group_data = $kartlar[$group_id];
        }
        
        // View dosyasını include et
        if (file_exists($this->module_path . 'views/admin-edit.php')) {
            include $this->module_path . 'views/admin-edit.php';
        } else {
            echo '<div class="notice notice-error"><p>Düzenleme sayfası dosyası bulunamadı.</p></div>';
        }
    }
    
    public function settings_page() {
        // Yetki kontrolü
        if (!current_user_can('manage_options')) {
            wp_die(__('Bu sayfaya erişim yetkiniz bulunmuyor.'));
        }
        
        $settings = get_option('esistenze_quick_menu_settings', EsistenzeQuickMenuCards::get_default_settings());
        
        // Form işleme
        if (isset($_POST['submit']) && wp_verify_nonce($_POST['_wpnonce'], 'esistenze_quick_menu_settings_save')) {
            $this->save_settings($_POST);
            $settings = get_option('esistenze_quick_menu_settings', EsistenzeQuickMenuCards::get_default_settings());
        }
        
        if (file_exists($this->module_path . 'views/admin-settings.php')) {
            include $this->module_path . 'views/admin-settings.php';
        } else {
            echo '<div class="notice notice-error"><p>Ayarlar sayfası dosyası bulunamadı.</p></div>';
        }
    }
    
    public function analytics_page() {
        // Yetki kontrolü
        if (!current_user_can('manage_options')) {
            wp_die(__('Bu sayfaya erişim yetkiniz bulunmuyor.'));
        }
        
        $analytics = get_option('esistenze_quick_menu_analytics', array());
        $kartlar = get_option('esistenze_quick_menu_kartlari', array());
        $settings = get_option('esistenze_quick_menu_settings', array());
        
        if (file_exists($this->module_path . 'views/admin-analytics.php')) {
            include $this->module_path . 'views/admin-analytics.php';
        } else {
            echo '<div class="notice notice-error"><p>Analytics sayfası dosyası bulunamadı.</p></div>';
        }
    }
    
    public function tools_page() {
        // Yetki kontrolü
        if (!current_user_can('manage_options')) {
            wp_die(__('Bu sayfaya erişim yetkiniz bulunmuyor.'));
        }
        
        $tools_data = array(
            'export_available' => true,
            'import_available' => true,
            'cache_stats' => $this->get_cache_stats(),
            'system_info' => $this->get_system_info()
        );
        
        if (file_exists($this->module_path . 'views/admin-tools.php')) {
            include $this->module_path . 'views/admin-tools.php';
        } else {
            echo '<div class="notice notice-error"><p>Araçlar sayfası dosyası bulunamadı.</p></div>';
        }
    }
    
    // AJAX Handler'ları
    public function ajax_save_card_group() {
        // Nonce ve yetki kontrolü
        if (!wp_verify_nonce($_POST['nonce'] ?? '', 'esistenze_quick_menu_nonce') || 
            !current_user_can($this->capability)) {
            wp_send_json_error('Yetkisiz erişim.');
        }
        
        $group_id = intval($_POST['group_id'] ?? 0);
        $cards_data = $_POST['cards_data'] ?? array();
        
        if (!is_array($cards_data)) {
            wp_send_json_error('Geçersiz kart verisi.');
        }
        
        // Kart verilerini sanitize et
        $sanitized_cards = array();
        foreach ($cards_data as $card_data) {
            $sanitized_card = $this->sanitize_card_data($card_data);
            
            // Validation
            $validation = $this->validate_card_data($sanitized_card);
            if ($validation !== true) {
                wp_send_json_error('Kart verisi hatası: ' . implode(', ', $validation));
            }
            
            $sanitized_cards[] = $sanitized_card;
        }
        
        // Veritabanına kaydet
        $kartlar = get_option('esistenze_quick_menu_kartlari', array());
        $kartlar[$group_id] = $sanitized_cards;
        
        $result = update_option('esistenze_quick_menu_kartlari', $kartlar);
        
        if ($result) {
            // Cache temizle
            $this->clear_cache();
            
            wp_send_json_success(array(
                'message' => 'Grup başarıyla kaydedildi!',
                'group_id' => $group_id,
                'card_count' => count($sanitized_cards),
                'redirect' => admin_url('admin.php?page=esistenze-quick-menu')
            ));
        } else {
            wp_send_json_error('Kayıt sırasında hata oluştu.');
        }
    }
    
    public function ajax_delete_card_group() {
        if (!wp_verify_nonce($_POST['nonce'] ?? '', 'esistenze_quick_menu_nonce') || 
            !current_user_can($this->capability)) {
            wp_send_json_error('Yetkisiz erişim.');
        }
        
        $group_id = intval($_POST['group_id'] ?? -1);
        
        if ($group_id < 0) {
            wp_send_json_error('Geç