name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [7.4, 8.0, 8.1, 8.2]
        wordpress-version: [5.8, 6.0, 6.1, 6.2, 6.3]
    
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wordpress_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: xdebug

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: Install NPM dependencies
      run: npm ci

    - name: Setup WordPress test environment
      run: |
        bash bin/install-wp-tests.sh wordpress_test root root localhost ${{ matrix.wordpress-version }}

    - name: Run PHP Code Sniffer
      run: composer phpcs

    - name: Run PHPUnit tests
      run: composer test
      env:
        WP_TESTS_DB_HOST: 127.0.0.1:3306

    - name: Run ESLint
      run: npm run lint:js

    - name: Run Stylelint
      run: npm run lint:css

    - name: Build assets
      run: npm run build

    - name: Upload coverage to Codecov
      if: matrix.php-version == '8.1' && matrix.wordpress-version == '6.3'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: Run security audit
      run: composer audit

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install NPM dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit --audit-level high

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build production assets
      run: npm run build

    - name: Create release archive
      if: github.event_name == 'release'
      run: |
        npm run zip
        mv esistenze-wordpress-kit.zip esistenze-wordpress-kit-${{ github.event.release.tag_name }}.zip

    - name: Upload release asset
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./esistenze-wordpress-kit-${{ github.event.release.tag_name }}.zip
        asset_name: esistenze-wordpress-kit-${{ github.event.release.tag_name }}.zip
        asset_content_type: application/zip

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Deploy to WordPress.org
      # This would be configured based on WordPress.org SVN requirements
      run: echo "Deploy to WordPress.org repository"
      # Custom deployment script would go here 